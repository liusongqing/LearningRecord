## TicGit ##

This project provides a ticketing system built on Git that is kept in a
separate branch in your projects Git repository.

### About ###

TicGit is a simple ticketing system, roughly similar to the Lighthouse model, that is based in git. It provides a command line client that uses the ‘git’ gem to keep its ticketing information in a separate branch (called ‘ticgit’) within your existing git repository. All the data is file based and rarely changing, decreasing the likelihood of a merge issue. Right now, ticket branch merges need to be done manually and separately, but work is being done on a `ti sync` command to make this easier and more intuitive.

The idea is that it keeps your tickets in the same repository, but without mucking up your working tree. By using its own seperate branch to store its information it keeps the working trees in all your other branches untouched.

There are two interfaces available, the command line `ti` command and the `ticgitweb` web interface, though `ticgitweb` has many more prerequisites than `ti`.

It will automatically create the new branch the first time you use it, and it caches all the data (another working directory and index file) in your ~/.ticgit directory by default. If you delete that directory, it will just create it again the next time, you will lose no data (except some of your saved preferences).

TicGit is currently using itself to store its feature requests and bug reports.

### Prerequisites ###

It is assumed that you already have a recent version of the Git revision control system installed. If it is not available through your package manager, you can download the latest Git source code from http://git-scm.com/ instead.

It is also assumed that you have a recent version of rubygems installed.  Older versions, such as the one available on Debian 5.0.5, will not work out of the box with the new gem repositories because the .deb in stable relies on rubyforge rather than rubygems for its operations. See [this bug](http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=558251) for an example. If you are running an older version of rubygems, you may need to get the latest rubygems package from http://rubygems.org/ or [apt](http://jaqque.sbih.org/kplug/apt-pinning.html) [pinning](http://jeffwelling.github.com//2010/09/05/Apt-Pinning.html) before being able to properly install the git and ticgit gems.


### Installing ###
Installation on a Debian stable system.  Note that the command line interface for ticgit can be run from Debian stable, but some of the gems required for the web interface may require you to use [apt](http://jaqque.sbih.org/kplug/apt-pinning.html) [pinning](http://jeffwelling.github.com//2010/09/05/Apt-Pinning.html) to run without errors.  See below. 

If you know what rake is and know you already have it installed, you can use the command `rake setup` to automatically install all dependencies.

There are two parts to ticgit, the command line interface `ti` and the optional web based interface `ticgitweb`.  To install the dependencies for either one, do

*ti*
    sudo aptitude install rubygems
    sudo gem install git

*ticgitweb*

    sudo aptitude install rubygems
    sudo gem install ticgit sinatra haml sass


### Usage ###

To get a list of all commands with short description:

    > ti --help
    Usage: ti COMMAND [FLAGS] [ARGS]
     
    Options for help command:
     
    The available ticgit commands are:
        recent                           List recent activities
        checkout                         Checkout a ticket
        tag                              Modify tags of a ticket
        comment                          Comment on a ticket
        milestone                        List and modify milestones
        assign                           Assings a ticket to someone
        points                           Assign points to a ticket
        state                            Change state of a ticket
        show                             Show a ticket
        new                              Create a new ticket
        attach                           Attach file to ticket
        list                             List tickets
     
    Common options:
        -v, --version                    Show the version number
        -h, --help                       Display this help
    "help" is not a command


To get help about a specific command:

    > ti <command> --help
    ## for example
    > ti assign --help
    Usage: ti assign [options] [ticket_id]
     
    Options for assign command:
        -c, --checkout TICKET            Checkout this ticket
        -u, --user USER                  Assign the ticket to this user
     
    Common options:
        -v, --version                    Show the version number
        -h, --help                       Display this help


The available commands are:

    ti list     - show all tickets
    ti show     - show details of a specific ticket
    ti new      - create a new ticket
    ti checkout - checkout a ticket
    ti state    - change a ticket state (open, resolved, invalid, hold)
    ti comment  - add a comment to a ticket
    ti tag      - add or delete a tag from a ticket
    ti assign   - change to whom a ticket is assigned


### Usage Examples ###

The first time you use any command in ticgit, it will create a new branch in your repo called ‘ticgit’ and setup a caching area in ~/.ticgit.

If you run it without arguments, it will tell you what is available to run

    $ ti
    Please specify at least one action to execute.

    Usage: ti COMMAND [FLAGS] [ARGS]
     
    The available ticgit commands are:
        recent                           List recent activities
        checkout                         Checkout a ticket
        tag                              Modify tags of a ticket
        comment                          Comment on a ticket
        milestone                        List and modify milestones
        assign                           Assings a ticket to someone
        points                           Assign points to a ticket
        state                            Change state of a ticket
        show                             Show a ticket
        new                              Create a new ticket
        attach                           Attach file to ticket
        list                             List tickets
     
    Common options:
        -v, --version                    Show the version number
        -h, --help                       Display this help

The first time you run `ti list`, it will show an empty list.

    $ ti list
    I, [2010-09-06T15:47:52.075485 #4820]  INFO -- : creating ticgit repo branch

       TicId  Title                             State Date  Assgn    Tags                
    -----------------------------------------------------------------------------------------

To add a new ticket to the system you can use `ti new` to bring up an editor which will allow you to add a title, comment and tags to the new ticket, or you can use `ti new -t 'Title of ticket'` to add the new ticket and give it a title in one command line, and add tags with `ti tag`

    $ ti new -t 'my new ticket'
    $ ti list

       TicId  Title                             State Date  Assgn    Tags                
    -----------------------------------------------------------------------------------------
       d7f2d8 my new ticket                     open  09/06 


To assign a tag to the new ticket we created we first checkout the ticket and then use `ti tag`.

    #ti checkout can checkout tickets based on the TicId or based on it's place in the list
    $ ti checkout 1
    #checks out the first ticket, or to do the same thing by using the TicId
    $ ti checkout d7f2d8
    #then assign the tag
    $ ti tag 'bug'
    #and view the result..
    $ ti list

       TicId  Title                                           State Date  Assgn    Tags                
    -------------------------------------------------------------------------------------------------------
    *  d7f2d8 my new ticket                                   open  09/06          bug               


    


## Authors ##

Original Author:
Scott Chacon                (schacon@gmail.com)

Current Active Maintainer:
Jeff Welling                (jeff.welling@gmail.com)

For a detailed list of contributors see the AUTHORS file
